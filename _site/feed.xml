<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Developer Blog</title>
    <description>My software development experience!</description>
    <link>http://tjeason.github.io/</link>
    <atom:link href="http://tjeason.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 21 Aug 2015 14:01:07 -0500</pubDate>
    <lastBuildDate>Fri, 21 Aug 2015 14:01:07 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Managing &amp; Scaling Containers</title>
        <description>&lt;p&gt;
In the IT Infrastructure industry, a new technology shift is happening.  A transition just as big as moving from physical (bare-metal) servers to virtual machines just over ten years ago.  Now, with virtualization can easily be done on a single physical computer to cloud, using containers is the next big step to be more efficient.  
&lt;/p&gt;

&lt;p&gt;
Even though &lt;a href=&quot;https://linuxcontainers.org/&quot; target=&quot;_blank&quot;&gt;Linux Containers (LXC)&lt;/a&gt; has been available to use in a while, the mass market did not even bother on how to figuring out to use them until the companies, Docker and Google, began publishing their work.  The &lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker Container Runtime Engine&lt;/a&gt; was developed as a side project to figure out a simpler way to use Linux containers.  Since Docker’s launch of its tools to simplify distributing and running apps, databases, and back-end API services, usage grew dramatically in the developer and operations community.  Development and operations teams loved the benefits of provisioning containers within seconds compared to minutes on traditional virtual machines, less  CPU usage on the host, and a guarantee an app running inside a container will run in any environment with minimal to none configurations on the host instances.  Even infrastructure architects are seeing the benefits of using containers.  Architects can move away from monolith (or silo) architectures to using a micro-services design. Cross communication can happen between various apps, databases, and web services using RESTful APIs.  A DevOps team can take down or update services without effecting other areas.  In result, a much more loosely-coupled architecture.  The transition from virtualization to containerization has gotten so popular even Microsoft is developing a version of Windows Server to run inside containers and partnering with Docker.  
&lt;/p&gt;

&lt;p&gt;
Great! The transition is happening and developers and operation teams are starting to figure out how to use containers to host their apps and services in sandboxes or production. But once the transformation happens, the next challenge is how to handle large scale deployments of containers.  IT Infrastructure Engineer and Operations Teams now have to figure how to orchestrate and manage hundreds to thousands of containers.  Companies and open-source communities are developing a variety of great technologies that will hopefully solve this type of issues.  Two technologies that are widely discussed online are Google’s Kubernetes and Mesosphere.
&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/img/kubernetes_logo.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;
&lt;a href=&quot;http://kubernetes.io/&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt; is Google’s open-sourced solution to managing a cluster of Linux containers as a single system to accelerate development and simplify operations.  Google has been using containers for a long time to run services, such as Gmail. Their container management solution has proven to be a great solution to handle usage in a massive environment.  It’s currently only used at the command-line.  One of Kubernetes’s strengths is able schedule large clusters of containers onto nodes to create “labels” and “pods”.  This process makes it easier to manage the grouped containers and discover.  Replication can be done as well.  
&lt;/p&gt;

&lt;p&gt;
Another approach is building a “data center operation system” to manage and deploy several containers.  Former Twitter and Airbnb Engineers founded the company and technology called &lt;a href=&quot;https://mesosphere.com/&quot; target=&quot;_blank&quot;&gt;Mesosphere&lt;/a&gt;.  Their approach is to organize the entire infrastructure as if it was a single computer. By using the command-line or GUI web app, administrators can launch and manage thousands of containers as a platform compared to just being a tool like Kubernetes.  The technology is built on top of &lt;a href=&quot;http://mesos.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Mesos&lt;/a&gt; to be a kernel for data pooling and handling distributed computing.  Other components to Mesosphere are Marathon for deploying long-running services, Chronos for chron tasks, and graphical dashboard for viewing services. Kubernetes is getting integrated as well.
&lt;/p&gt;

&lt;center&gt;
  &lt;img src=&quot;/img/mesosphere.png&quot; /&gt;
  &lt;br /&gt;
  &lt;small&gt;Mesosphere - GUI Web App screenshot of managing a cluster of containers.&lt;/small&gt;
&lt;/center&gt;

&lt;p&gt;
In summary, managing and deployment solutions for containers is still in its infancy. The technologies I mentioned in this article are some of the more interesting and supported tools, which have great potential to be commonly used from startups to enterprises.  There is still plenty of time for companies to decide of running container and micro-services to be a great fit or not.  The tech community recently setup the &lt;a href=&quot;https://www.opencontainers.org/&quot; target=&quot;_blank&quot;&gt;Open Container Initiative&lt;/a&gt; to help standardize container formats and runtimes.  The initiative is under the loosely-governed Linux Foundation and supported by companies, such as Amazon, Joyent, Cisco, IBM, Docker, Google, Microsoft, HP, and Oracle. If you have not tried using containers as a developer or system administrator, then now is an exciting time to starting learning before the “big transformation” happens.
&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = &#39;tjeasongithubio&#39;; // required: replace example with your forum shortname

/* * * DON&#39;T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
  dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
  (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
  })();
  &lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Fri, 21 Aug 2015 09:00:00 -0500</pubDate>
        <link>http://tjeason.github.io/2015/08/21/Managing-and-Scaling-Containers/</link>
        <guid isPermaLink="true">http://tjeason.github.io/2015/08/21/Managing-and-Scaling-Containers/</guid>
        
        
      </item>
    
      <item>
        <title>Building a Strong Team</title>
        <description>&lt;p&gt;
  Building a strong team culture for your development teams can provide a lot of
  great benefits. Great development teams thrive and provides a substantial amount
  of value for a company. In order to have a great development team with a good
  culture, sacrifice, hard work, and the desire need to be in place to make it
  happen.
&lt;/p&gt;

&lt;p&gt;
  For developers and managers joining (or creating) new teams will have challenges
  integrating (or building) a strong team culture. Different challenges can arrive
  through out a team&#39;s lifecycle. Managers will have their own set of challenges
  while individual contributors will deal their own set as well. What do they need
  to do to overcome their challenges to make a great team?
&lt;/p&gt;

&lt;p&gt;
  For managers, they need to have good leadership skills, and be active in the
  team&#39;s projects. Managers should lead weekly team discussions to communicate
  organization updates, important management decisions, and provide feedback on
  project updates. Attending scrum meetings at least a few times a month lets
  developers know that you are interested in their work and available to answer
  questions. Most importantly, be there for the developers. Managers should be
  available as much as possible to have one-to-one meetings, reply to e-mails,
  and listen. They should provide provide recognition when someone does well, and
  professional criticism to motivate when somone makes a mistake or weak in an area.
  Managers making the effort to &quot;be there&quot; for professional and personal
  circumstances makes a huge difference, and one step closer strengthening the team.
&lt;/p&gt;

&lt;p&gt;
  Developers wanting to part of a strong team need to be open-minded, communicate,
  and help each other on problems. Team meetings does not have to just be providing
  developer status updates on projects. They also should have a chance to ask questions,
  give feedback, or request assistance in training or solving a problem at a later time.
  Developers with the right skills and experience should help by giving advice,
  perform reviews, or put someone on the right track to success. It&#39;s frustrating
  to know many developers believe by taking away their time from their schedule to
  help with someone else&#39;s work will hurt them. Yes, developers have to hit deadlines,
  and can&#39;t always be accessible. But don&#39;t just focus on yourself to have a successful
  career. Focusing efforts to contribute to the team will lead to more successful
  outcomes. These efforts will generate positive impacts by sacrificing some time. Helping
  other teams members builds confidence, trust, skills, and strengthens relationships.
  Good managers will view the efforts positively, which could lead to a promotion
  or wage increase. Great developers not only have the technical skills, but the
  abilities to teach and communicate effectively to build a strong bond with their
  teammates.
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t just focus on yourself to have a successful career. Focusing efforts to
contribute to the team will lead to more successful outcomes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;&lt;img src=&quot;/img/teamwork_baby.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;&lt;/center&gt;

&lt;p&gt;
  When team managers and developers overcome these challenges, they build a strong
  foundation for a great team culture. A great team culture benefits the company,
  employees, and customers.  Productivity increases, employee morale improves, less
  turn-over, better return on investments, and the list of benefits could be endless.
  Remember, people don&#39;t achieve their career goals alone. People need advice, aide,
  and the ability network as a team to reach objectives. So if you have not started
  building a strong team at your company, then now is the time.
&lt;/p&gt;

&lt;hr /&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = &#39;tjeasongithubio&#39;; // required: replace example with your forum shortname

/* * * DON&#39;T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
  dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
  (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
  })();
  &lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 09:22:00 -0500</pubDate>
        <link>http://tjeason.github.io/2015/06/22/bulding-a-strong-team/</link>
        <guid isPermaLink="true">http://tjeason.github.io/2015/06/22/bulding-a-strong-team/</guid>
        
        
      </item>
    
      <item>
        <title>Basic Linux Web Server Monitoring</title>
        <description>&lt;p&gt;
  So you want to monitor your web application or server?  No problem.  There is a simple way to provide
  monitoring using a Python script and a cronjob on a Linux server.  You can follow the steps below for
  a basic monitoring system, be alerted by e-mail when your app or server goes down.
&lt;/p&gt;

&lt;h3&gt;Creating the Server Monitoring Script &lt;/h3&gt;

&lt;p&gt;
  First, make sure you have an access to a Linux server with at least execution permissions in a directory you plan
  to a script.  The next step is to create a script that will perform health checks on a single or cluster of
  web applications.  The script written below uses the standard Python 2.x libraries.  The script is named
  &lt;em&gt;server_monitor.py.&lt;/em&gt;
&lt;/p&gt;

&lt;!-- Full Python Server Monitoring Script --&gt;
&lt;script src=&quot;https://gist.github.com/tjeason/05055c7956e7578e3c2f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;
  The single Python script uses the system, URL, web socket, and time modules.  The objective is to create a simple
  command line interface program that is reusable for multiple use cases.  The script should be able read the user’s
  commands, make a socket connection request to detect if the web application’s port is being used, and return a health
  check status. E-mail notifications can also be sent if the script returns a specific status.  For example, if a system
  administrator would like to know when an application with an Apache web server used on port 80 is down, then an e-mail
  message will be sent immediately after the script is executed.  Let’s breakdown the server monitoring script to describe
  what is happening in each method.
&lt;/p&gt;

&lt;h3&gt;The Main Method&lt;/h3&gt;

&lt;p&gt;
  Starting with the main method, this section gets initiated first.  The first line of code in the main method checks the
  required amount of input arguments expected to run when the script executes.  If the user fails to provide the exact number
  of arguments, then the user will receive a help message and directions called in the usage() method.  Otherwise, the number
  of arguments passed is correct and proceed with network health check starting in the server_test() method.  The program is expecting
  to use four arguments: script itself, network test type, hostname with port number, and e-mail address used to send notifications.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Main method - Invoke script and parse arguments.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Wrong number of arguments.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;send_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Usage Method&lt;/h3&gt;

&lt;p&gt;
  The usage outputs a summary of information about how to properly run the script.  As you can see, the methods contains only
  print statements to give the user hints.  The first print statement displays the following the arguments types requested.
  The rest of the print statements include short descriptions of each argument type.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Help menu.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;lt;test-type&amp;gt; &amp;lt;server-info&amp;gt; &amp;lt;email-address&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test-type    &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tcp or http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server-info  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hostname:port for tcp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://hostname/page for http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;email-address&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username or username@domain.com&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Server Test Method&lt;/h3&gt;

&lt;p&gt;
  The server_test() method is called in the main function if the number of arguments are correct.  The method requires two
  parameters, network test type and the hostname (IP address) with port number. For this script, the script is looking for
  either HTTP or TCP requests. Using one of the network protocols will determine the next method to be used to handle the
  sent host properly.  Anything parameter that not state either “http” or “tcp” in the command is flagged in the else block
  with a print statement to inform the user about the incorrect test-type.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Parse arguments passed from the script, and determine which test was requested.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;server_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;tcp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Invalid test-type given, please use either tcp or http.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The HTTP Test Method&lt;/h3&gt;

&lt;p&gt;
  The http_test() method sends a request to the specified server and port to determine if the HTTP connection is a success.
  The function requires on parameter, which is the server information (host and port).  The value passed should abide by a
  specific expression:
&lt;/p&gt;

&lt;blockquote&gt;
  hostname:port (ex. mydomainname.com:80)
&lt;/blockquote&gt;

&lt;p&gt;
  The method calls the urlopen() method from the urllib2 module to read the URL with a HTTP response. The urlopen().read() will
  return the HTML content from the URL’s web page.  If the HTTP request was a success, then returning True will not perform anymore
  steps. The web application is running on the server.  Returning false will call the send_error() method to send an e-mail
  notification that the server is down.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Establish a HTTP(S) request to a server, and report if attempt was successfull.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;http_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The TCP Test Method&lt;/h3&gt;

&lt;p&gt;
  With this Python script, you can also use TCP instead of HTTP for your server health check.  The tcp_test() method uses web sockets
  for network statuses.  The method requires one parameter.  The host and port number is passed as a string.  The server information is
  parsed to operate the port number by finding the colon (:).  For instance, the argument should be the same as mentioned in the HTTP Test
  Method section:
&lt;/p&gt;

&lt;blockquote&gt;
  hostname:port
&lt;/blockquote&gt;

&lt;p&gt;
  If the validation fails, then an output notification can be written to inform the administrator that the expression is incorrect.
  Passing the validation check will the begin the process of creating a web socket using the imported socket module to perform the TCP connection test.
  If a socket connection is made successfully to the host, then the web application passed the TCP check and returning True as the value.
  Returning false will call the send_error() method to send an e-mail notification that the server is down.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Establish a TCP connection to hostname:port, and report if attempt was successfull.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tcp_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;cpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;You need to give server info as hostname:port.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Send Error Method&lt;/h3&gt;

&lt;p&gt;
  The final method being used in this script is the send_error() method.  The primary responsibility for this function is to send an e-mail
  notification to the desired users about either a HTTP or TCP  health check failing.  The method requires the Linux mail command to be
  installed on the server.    A subject and message body is created here.  A Linux system call is used to perform to run the mail command with
  the arguments. The method requires three parameters values: the network test type (HTTP/TCP), host and port number, and the e-mail address
  of the receiver(s).  The network test type is used to inform what kind of health check was executed and time. The server_info parameter provides
  what host (domain name or IP address) and port was tested, and the e-mail address to inform a administrator about the failed status.  The default
  e-mail message is short and direct to notify an administrator with enough information.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Create e-mail message, and send notification.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is down&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asctime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Server Monitor: Performed a health-check running a &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; test against &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;. The server is down.&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;echo &amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; | mail -s &amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Setting up Automated Recurring Health Checks&lt;/h3&gt;

&lt;p&gt;
  Once the script is tested and working the way you want, you can setup basic scheduling using a Linux cron job.  In your home directory, you
  can create a crontab.  To edit your crontab file, type the following command in the Linux shell prompt:
&lt;/p&gt;

&lt;blockquote&gt;
  $ crontab -e
&lt;/blockquote&gt;

&lt;p&gt;
  Next, you need to follow the proper syntax (field description) to have the system run server monitoring script the way you want.  For example,
  you can run the script per minute, hour, day, etc.  The sample below shows running two different types of test.  One job is scheduled to run
  every 10 minutes to perform a TCP health check on web app server running on port 9000.  The other cron job is scheduled to run every 30 minutes
  to do a HTTP health check on the proxy server using port 80.  Failed health checks will send a text-based e-mail to the e-mail address set in
  the cron jobs.
&lt;/p&gt;

&lt;blockquote&gt;
  */10 * * * * /home/username/server_monitor.py tcp mydomainname.com:9000 admin-email@email.com

  &lt;br /&gt;&lt;br /&gt;

  */30 * * * * /home/username/server_monitor.py http mydomainname.com:80 admin-email@email.com
&lt;/blockquote&gt;

&lt;p&gt;
  Once you save and exit, such as using the VI editor, your crontab is started.
&lt;/p&gt;

&lt;p&gt;
  You can learn more in more details about the crontab by going &lt;a href=&quot;http://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;
  I this post gives you an idea on how to set your own web application/server monitoring.  It’s been very helpful for me to alert me by e-mail when
  something is down.  The script can be improved.  For instance, You could setup logging using a Python log module to create log file(s) to keep a
  close eye on your monitoring and tracking historical data.  Collected data can come in handy for troubleshooting or even performing extraction to
  visualize the data in a dashboard. I hope this information helps! Happy coding and administrating!
&lt;/p&gt;

&lt;hr /&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = &#39;tjeasongithubio&#39;; // required: replace example with your forum shortname

/* * * DON&#39;T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
  dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
  (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
  })();
  &lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Wed, 11 Feb 2015 14:00:00 -0600</pubDate>
        <link>http://tjeason.github.io/2015/02/11/server-monitoring-with-python/</link>
        <guid isPermaLink="true">http://tjeason.github.io/2015/02/11/server-monitoring-with-python/</guid>
        
        
      </item>
    
      <item>
        <title>Know When Not to be a Cowboy Coder</title>
        <description>&lt;p&gt;
  When starting new software development projects, there can be an urge to start coding away.
  You know what the outcome should be and have at least a general idea how the software should work.
  Why not begin programming? What are the consequences? These are the type of questions you should be
  asking yourself (and your team) before implementing.
&lt;/p&gt;

&lt;p&gt;
  Software development projects typically use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Application_lifecycle_management&quot;&gt;
  Application Lifecycle Management (ALM)&lt;/a&gt;, or can be called Application Development Life-cycle Management (ADLM)
  if DevOps is included.  A common software development practice will involve gathering all the required information
  and resources, planning, design, implementation, testing, and then moving to production.  It is possible that
  developers to skip the planning stage and going straight to writing code and still have a successful release.
  When developers have the freedom to skip the planning stage will lead them to a new, wild adventure.
&lt;/p&gt;

&lt;center&gt;
  &lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/5/5f/Three_software_development_patterns_mashed_together.svg&quot; width=&quot;400&quot; height=&quot;400&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;
  Skipping requirements and planning stages, and allowing engineer(s) to starting hacking a solution can be considered
  as &lt;a href=&quot;http://en.wikipedia.org/wiki/Cowboy_coding&quot;&gt;“cowboy coding”&lt;/a&gt;.  The software practice is great for learning and prototyping, but I would not recommend developers
  being coder cowboys on highly-visible, critical, or complex projects.  A programmer may receive pressure to hit a short
  deadline, but that does not mean it’s time to put on your cowboy hat and start the design, implementation, and testing phases
  at once.  Let’s look at few of the pros and cons of this practice:
&lt;/p&gt;

&lt;h3&gt;Good&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    Great for learning a new programming language or framework.  Developers can setup a development environment and
    acquire a new skill. Remember, learning how to write software requires “doing”.
  &lt;/li&gt;
  &lt;li&gt;
    Creating prototypes with no or soft deadlines. If you have an idea and time for a solution, then writing small
    features or applications is a great way to see if you have a good solution or not.
  &lt;/li&gt;
  &lt;li&gt;
    Writing small unit-tests.  After building your logic with your code, it’s good practice to make sure there is no
    flaws and production ready.  Unit tests focusing on a section of your solution can be small enough without having
    to plan and design your unit test framework to see if the tests will pass.
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Bad&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    Easier to miss deadlines.  Cowboy coding allows to jump right into the text editor, but with high risks.
    For instance, many managers or customers want to know when development goals can be achieved by a set date and
    time.  By not planning properly, engineers increase their chances of missing deadlines. Missing deadlines can
    impact costs, frustration, stress, and even working longer hours.
  &lt;/li&gt;
  &lt;li&gt;
    Reduces team communication.  In software development projects involving teams, no documentation on planning, scope,
    requirements, etc. reduces communication on how a solution is going to work.
  &lt;/li&gt;
  &lt;li&gt;
    More difficult to set deadlines.  It can be very hard to set goals to meet at specific timeframes for medium and
    large projects.  Without enough preparation, developers are generating more uncertainty of when to say done!
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
  I have had personal experience dealing with cowboy coding in various ways. From testing and touching code in
  production, it can be risky and not supported.  I now know when I can skip all of the pre-coding steps and the
  consequences.  I recommended software developers think about the pros and cons before jumping straight to writing
  code.  Management and users will have a better appreciation of the work knowing there was proper care placed to
  provide a great solution.
&lt;/p&gt;

&lt;hr /&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = &#39;tjeasongithubio&#39;; // required: replace example with your forum shortname

/* * * DON&#39;T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
  dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
  (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
  })();
  &lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Sat, 17 Jan 2015 06:00:00 -0600</pubDate>
        <link>http://tjeason.github.io/2015/01/17/cowboy-coding/</link>
        <guid isPermaLink="true">http://tjeason.github.io/2015/01/17/cowboy-coding/</guid>
        
        
      </item>
    
      <item>
        <title>Hello, World</title>
        <description>&lt;p&gt;
  Since this is my first post, I just wanted to say hello, world! I wanted to reference my
  first blog post to new programmers who write their first &quot;Hello, World&quot;, program. New developers
  learn how to write code using a popular programming language, such as Python, Ruby, C++, or Java,
  to write a simple text output of the famous message.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# File: hello_world.py&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
  In my posts, I plan to share my interests, research, and developer experience.  Like manny open-source
  developers in the community, I want to share ideas, contribute, and provide positive experiences to
  others. I will my technical challenges and solutions at a higher level than a traditional white paper.
  If required, code samples, graphs, and diagrams will be used to clarify a solution or experience.
&lt;/p&gt;

&lt;p&gt;
  I look forward to contributing my experience on my developer blogger. Feel free to comment posts and
  fork any gists in my GitHub.  Happy writing and coding in the new year!
&lt;/p&gt;

&lt;hr /&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = &#39;tjeasongithubio&#39;; // required: replace example with your forum shortname

/* * * DON&#39;T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
  dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
  (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
  })();
  &lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 06:00:00 -0600</pubDate>
        <link>http://tjeason.github.io/2015/01/01/hello-world/</link>
        <guid isPermaLink="true">http://tjeason.github.io/2015/01/01/hello-world/</guid>
        
        
      </item>
    
  </channel>
</rss>
